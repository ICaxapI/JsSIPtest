#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jssiptest:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var options = {
    key: fs.readFileSync('cert/mykey.key'),
    cert: fs.readFileSync('cert/cert.crt')
};
var express = require('express')

/**
 * Get port from environment and store in Express.
 */
var portHttps = normalizePort(process.env.PORT || '443');
app.set('port', portHttps);

/**
 * Create HTTPS server.
 */

var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(portHttps);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var portN = parseInt(val, 10);

  if (isNaN(portN)) {
    // named pipe
    return val;
  }

  if (portN >= 0) {
    // port number
    return portN;
  }

  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

var httpApp = express();
var httpRouter = express.Router();
httpApp.use('*', httpRouter);
httpRouter.all('*', function(req, res){
    var host = req.get('Host');
    host = host.replace(/:\d+$/, ":"+app.get('port'));
    var destination = ['https://', host, req.url].join('');
    return res.redirect(destination);
});
var httpServer = http.createServer(httpApp);
httpServer.listen(80);